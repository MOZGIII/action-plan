{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/main/index.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,eAAe,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,KAAK,GAAG,CAA2B,GAAQ,EAAU,EAAE;IAC3D,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,GAAG,KAAK,SAAS,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC1C,OAAO,CAAC,GAAG,CAAC,qBAAqB,QAAQ,OAAO,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAEjE,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAEvD,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAE1D,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,KAAY,EAAE,EAAE;IACnC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;IAEzD,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5C,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;QACtB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACrB;IAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;AAC9C,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import core from \"@actions/core\";\nimport { evalPlan } from \"./runtime.js\";\n\nconst input = <const Key extends string>(key: Key): string => {\n  const val = process.env[key];\n  if (val === undefined) {\n    throw new Error(`Input parameter required but was not provided: {key}`);\n  }\n  return val;\n};\n\nconst main = async () => {\n  const planFile = input(\"INPUT_PLAN_FILE\");\n  console.log(`Loading plan file ${planFile} at ${process.cwd()}`);\n\n  const plan = core.getInput(\"plan\", { required: true });\n\n  const computedMatrix = await evalPlan({ planFile, plan });\n\n  core.setOutput(\"matrix\", computedMatrix);\n};\n\nconst handleError = (error: Error) => {\n  const info = error.stack?.toString() || error.toString();\n\n  const logErrors = process.env[\"LOG_ERRORS\"];\n  if (Boolean(logErrors)) {\n    console.error(info);\n  }\n\n  core.setFailed(info);\n};\n\nprocess.on(\"unhandledRejection\", handleError);\nmain().catch(handleError);\n"]}