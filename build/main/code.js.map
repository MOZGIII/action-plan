{"version":3,"file":"code.js","sourceRoot":"","sources":["../../src/main/code.ts"],"names":[],"mappings":"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","sourcesContent":["import { Service, create } from \"ts-node\";\nimport { readFile } from \"fs/promises\";\nimport path from \"path\";\nimport { readFileSync } from \"fs\";\nimport nodeModule from \"module\";\nimport root from \"../common/root.js\";\n\nexport type CreateCompilerParams = {\n  rootFile: string;\n  tsconfig: string | undefined;\n};\n\nexport const createCompiler = (params: CreateCompilerParams): Service => {\n  const {\n    rootFile: _,\n    tsconfig = path.resolve(root, \"tsconfig.runtime.json\"),\n  } = params;\n\n  return create({\n    project: tsconfig,\n    esm: true,\n\n    compilerOptions: {\n      // The way we interact with the file requires that it is built as\n      // a NodeNext module. This can be changed as long as we can load and run\n      // the file.\n      module: \"NodeNext\",\n      // To allow loading files without an extension.\n      moduleResolution: \"Bundler\",\n    },\n  });\n};\n\nexport const compileCode = (\n  code: string,\n  file: string,\n  service: Service,\n): string => {\n  const logRawCode = process.env[\"LOG_RAW_CODE\"];\n  if (Boolean(logRawCode)) {\n    console.log(code);\n  }\n\n  const compiledCode = service.compile(code, file);\n\n  const logCode = process.env[\"LOG_CODE\"];\n  if (Boolean(logCode)) {\n    console.log(compiledCode);\n  }\n\n  return compiledCode;\n};\n\nconst makeCreateRequire = (service: Service, fromFile: string) => {\n  const fromDir = path.dirname(fromFile);\n  const ourRequire = (file: string) =>\n    importModuleSync(path.resolve(fromDir, file + \".ts\"), service, {});\n  const nodeRequire = nodeModule.createRequire(path.resolve(fromFile));\n\n  return (file: string) => {\n    return path.isAbsolute(file) || file.startsWith(\".\")\n      ? ourRequire(file)\n      : nodeRequire(file);\n  };\n};\n\nconst makeModuleWrapperArgs = <C extends Record<string, any>>(\n  file: string,\n  require: (file: string) => any,\n  context: C,\n) => {\n  const exports = {};\n  const module = { exports };\n  const wrapperArgs = {\n    exports,\n    require,\n    module,\n    __filename: file,\n    __dirname: path.dirname(file),\n    ...context,\n  };\n  return wrapperArgs;\n};\n\nexport type ImportedModule = {\n  exports: { [x: string]: any };\n};\n\nexport const importModule = async <C extends Record<string, any>>(\n  file: string,\n  service: Service,\n  context: C,\n): Promise<ImportedModule> => {\n  const rawCode = await readFile(file, { encoding: \"utf8\" });\n  const code = await compileCode(rawCode, file, service);\n\n  const require = makeCreateRequire(service, file);\n\n  const wrapperArgs = makeModuleWrapperArgs(file, require, context);\n\n  await callAsyncFunction(code, wrapperArgs);\n\n  return wrapperArgs.module;\n};\n\nexport const importModuleSync = <C extends Record<string, any>>(\n  file: string,\n  service: Service,\n  context: C,\n): ImportedModule => {\n  const rawCode = readFileSync(file, { encoding: \"utf8\" });\n  const code = compileCode(rawCode, file, service);\n\n  const require = makeCreateRequire(service, file);\n\n  const wrapperArgs = makeModuleWrapperArgs(file, require, context);\n\n  callFunction(code, wrapperArgs);\n\n  return wrapperArgs.module;\n};\n\nconst AsyncFunction = Object.getPrototypeOf(async () => null).constructor;\n\nexport function callAsyncFunction<Args extends Record<string, any>>(\n  source: string,\n  args: Args,\n): Promise<any> {\n  const fn = new AsyncFunction(...Object.keys(args), source);\n  return fn(...Object.values(args));\n}\n\nconst Function = Object.getPrototypeOf(() => null).constructor;\n\nexport function callFunction<Args extends Record<string, any>>(\n  source: string,\n  args: Args,\n): any {\n  const fn = new Function(...Object.keys(args), source);\n  return fn(...Object.values(args));\n}\n"]}